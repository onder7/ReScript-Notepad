// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as JsxRuntime from "react/jsx-runtime";

var BlobBinding = {};

var URLBinding = {};

function exportToTxt(notes) {
  var content = Belt_Array.reduce(notes, "", (function (acc, note) {
          return acc + "Başlık: " + note.title + "\nTarih: " + note.createdAt + "\nİçerik: " + note.content + "\n\n-------------------\n\n";
        }));
  var blob = new Blob([content], {
        type: "text/plain;charset=utf-8"
      });
  var url = URL.createObjectURL(blob);
  var a = document.createElement("a");
  a.href = url;
  a.download = "notlar.txt";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

function saveNotes(notes) {
  var jsonString = JSON.stringify(notes);
  if (jsonString !== undefined) {
    localStorage.setItem("notes", jsonString);
    return ;
  }
  
}

function loadNotes() {
  var str = localStorage.getItem("notes");
  if (str === null) {
    return [];
  }
  var json;
  try {
    json = JSON.parse(str);
  }
  catch (exn){
    return [];
  }
  var array = Js_json.decodeArray(json);
  if (array !== undefined) {
    return Belt_Array.keepMap(array, (function (item) {
                  var obj = Js_json.decodeObject(item);
                  if (obj === undefined) {
                    return ;
                  }
                  var match = Js_dict.get(obj, "id");
                  var match$1 = Js_dict.get(obj, "title");
                  var match$2 = Js_dict.get(obj, "content");
                  var match$3 = Js_dict.get(obj, "createdAt");
                  if (match === undefined) {
                    return ;
                  }
                  if (match$1 === undefined) {
                    return ;
                  }
                  if (match$2 === undefined) {
                    return ;
                  }
                  if (match$3 === undefined) {
                    return ;
                  }
                  var match$4 = Js_json.decodeString(match);
                  var match$5 = Js_json.decodeString(match$1);
                  var match$6 = Js_json.decodeString(match$2);
                  var match$7 = Js_json.decodeString(match$3);
                  if (match$4 !== undefined && match$5 !== undefined && match$6 !== undefined && match$7 !== undefined) {
                    return {
                            id: match$4,
                            title: match$5,
                            content: match$6,
                            createdAt: match$7
                          };
                  }
                  
                }));
  } else {
    return [];
  }
}

var $$Storage = {
  saveNotes: saveNotes,
  loadNotes: loadNotes
};

var initialState_notes = loadNotes();

var initialState = {
  notes: initialState_notes,
  currentNote: undefined,
  newNoteTitle: "",
  newNoteContent: ""
};

function reducer(state, action) {
  if (typeof action !== "object") {
    if (action === "AddNote") {
      var newNote_id = Date.now().toString();
      var newNote_title = state.newNoteTitle;
      var newNote_content = state.newNoteContent;
      var newNote_createdAt = new Date().toLocaleDateString();
      var newNote = {
        id: newNote_id,
        title: newNote_title,
        content: newNote_content,
        createdAt: newNote_createdAt
      };
      var newNotes = Belt_Array.concat(state.notes, [newNote]);
      saveNotes(newNotes);
      return {
              notes: newNotes,
              currentNote: state.currentNote,
              newNoteTitle: "",
              newNoteContent: ""
            };
    }
    exportToTxt(state.notes);
    return state;
  } else {
    switch (action.TAG) {
      case "UpdateNoteTitle" :
          return {
                  notes: state.notes,
                  currentNote: state.currentNote,
                  newNoteTitle: action._0,
                  newNoteContent: state.newNoteContent
                };
      case "UpdateNoteContent" :
          return {
                  notes: state.notes,
                  currentNote: state.currentNote,
                  newNoteTitle: state.newNoteTitle,
                  newNoteContent: action._0
                };
      case "SelectNote" :
          return {
                  notes: state.notes,
                  currentNote: action._0,
                  newNoteTitle: state.newNoteTitle,
                  newNoteContent: state.newNoteContent
                };
      case "DeleteNote" :
          var id = action._0;
          var newNotes$1 = Belt_Array.keep(state.notes, (function (note) {
                  return note.id !== id;
                }));
          saveNotes(newNotes$1);
          return {
                  notes: newNotes$1,
                  currentNote: undefined,
                  newNoteTitle: state.newNoteTitle,
                  newNoteContent: state.newNoteContent
                };
      case "LoadNotes" :
          return {
                  notes: action._0,
                  currentNote: state.currentNote,
                  newNoteTitle: state.newNoteTitle,
                  newNoteContent: state.newNoteContent
                };
      
    }
  }
}

var container = "flex min-h-screen bg-gray-100 p-4";

var sidebar = "w-80 bg-white rounded-lg shadow-md p-4 mr-4";

var content = "flex-1 bg-white rounded-lg shadow-md p-4";

var input = "w-full p-2 border rounded-md mb-2";

var textarea = "w-full p-2 border rounded-md mb-2 h-32 resize-none";

var button = "w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 mb-2";

var exportButton = "w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-600";

var deleteButton = "bg-red-500 text-white px-2 py-1 rounded-md hover:bg-red-600 text-sm";

var noteItem = "flex justify-between items-center p-2 border-b hover:bg-gray-50 cursor-pointer";

var noteList = "mt-4";

var noteTitle = "text-lg font-semibold";

var noteContent = "mt-2 text-gray-600";

var noteDate = "text-sm text-gray-400 mt-2";

var noNote = "text-gray-500 text-center mt-4";

var Styles = {
  container: container,
  sidebar: sidebar,
  content: content,
  input: input,
  textarea: textarea,
  button: button,
  exportButton: exportButton,
  deleteButton: deleteButton,
  noteItem: noteItem,
  noteList: noteList,
  noteTitle: noteTitle,
  noteContent: noteContent,
  noteDate: noteDate,
  noNote: noNote
};

function NotePad(props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var notes = loadNotes();
          dispatch({
                TAG: "LoadNotes",
                _0: notes
              });
        }), []);
  var note = state.currentNote;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("input", {
                              className: input,
                              placeholder: "Not Başlığı",
                              type: "text",
                              value: state.newNoteTitle,
                              onChange: (function (evt) {
                                  dispatch({
                                        TAG: "UpdateNoteTitle",
                                        _0: evt.target.value
                                      });
                                })
                            }),
                        JsxRuntime.jsx("textarea", {
                              className: textarea,
                              placeholder: "Not İçeriği",
                              value: state.newNoteContent,
                              onChange: (function (evt) {
                                  dispatch({
                                        TAG: "UpdateNoteContent",
                                        _0: evt.target.value
                                      });
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: "Not Ekle",
                              className: button,
                              disabled: state.newNoteTitle === "" || state.newNoteContent === "",
                              onClick: (function (param) {
                                  dispatch("AddNote");
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: "Notları TXT Olarak İndir",
                              className: exportButton,
                              onClick: (function (param) {
                                  dispatch("ExportNotes");
                                })
                            }),
                        JsxRuntime.jsx("div", {
                              children: Belt_Array.map(state.notes, (function (note) {
                                      return JsxRuntime.jsxs("div", {
                                                  children: [
                                                    JsxRuntime.jsx("div", {
                                                          children: note.title,
                                                          onClick: (function (param) {
                                                              dispatch({
                                                                    TAG: "SelectNote",
                                                                    _0: note
                                                                  });
                                                            })
                                                        }),
                                                    JsxRuntime.jsx("button", {
                                                          children: "Sil",
                                                          className: deleteButton,
                                                          onClick: (function (param) {
                                                              dispatch({
                                                                    TAG: "DeleteNote",
                                                                    _0: note.id
                                                                  });
                                                            })
                                                        })
                                                  ],
                                                  className: noteItem
                                                }, note.id);
                                    })),
                              className: noteList
                            })
                      ],
                      className: sidebar
                    }),
                JsxRuntime.jsx("div", {
                      children: note !== undefined ? JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: note.title,
                                      className: noteTitle
                                    }),
                                JsxRuntime.jsx("p", {
                                      children: note.content,
                                      className: noteContent
                                    }),
                                JsxRuntime.jsx("small", {
                                      children: note.createdAt,
                                      className: noteDate
                                    })
                              ]
                            }) : JsxRuntime.jsx("div", {
                              children: "Not seçilmedi",
                              className: noNote
                            }),
                      className: content
                    })
              ],
              className: container
            });
}

var make = NotePad;

export {
  BlobBinding ,
  URLBinding ,
  exportToTxt ,
  $$Storage ,
  initialState ,
  reducer ,
  Styles ,
  make ,
}
/* initialState Not a pure module */
